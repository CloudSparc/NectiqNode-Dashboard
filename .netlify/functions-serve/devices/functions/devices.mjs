
import {createRequire as ___nfyCreateRequire} from "module";
import {fileURLToPath as ___nfyFileURLToPath} from "url";
import {dirname as ___nfyPathDirname} from "path";
let __filename=___nfyFileURLToPath(import.meta.url);
let __dirname=___nfyPathDirname(___nfyFileURLToPath(import.meta.url));
let require=___nfyCreateRequire(import.meta.url);


// functions/utils/db.js
import pg from "pg";
var { Pool } = pg;
var connectionString = process.env.DATABASE_URL || process.env.NEON_DATABASE_URL;
if (!connectionString) {
  throw new Error("Missing DATABASE_URL (Neon Postgres connection string)");
}
var pool = new Pool({
  connectionString,
  ssl: { rejectUnauthorized: false }
});
async function query(q, params) {
  const client = await pool.connect();
  try {
    const res = await client.query(q, params);
    return res;
  } finally {
    client.release();
  }
}
async function ensureSchema() {
  await query(`
    CREATE TABLE IF NOT EXISTS devices (
      device_id TEXT PRIMARY KEY,
      name TEXT,
      created_at TIMESTAMPTZ DEFAULT NOW()
    );
  `);
  await query(`
    CREATE TABLE IF NOT EXISTS readings (
      id BIGSERIAL PRIMARY KEY,
      device_id TEXT NOT NULL REFERENCES devices(device_id) ON DELETE CASCADE,
      ts TIMESTAMPTZ NOT NULL,
      temp_c DOUBLE PRECISION,
      humidity DOUBLE PRECISION,
      sound_db DOUBLE PRECISION,
      payload_json JSONB
    );
  `);
}

// functions/devices.js
var devices_default = async (req, context) => {
  if (req.method === "OPTIONS")
    return new Response(null, { headers: cors() });
  if (req.method !== "GET")
    return json({ error: "Method not allowed" }, 405);
  try {
    await ensureSchema();
    const { rows } = await query(`SELECT device_id, COALESCE(name, device_id) AS name FROM devices ORDER BY device_id`);
    return json({ devices: rows });
  } catch (e) {
    return json({ error: e.message }, 500);
  }
};
function cors() {
  return {
    "Access-Control-Allow-Origin": process.env.CORS_ORIGINS || "*",
    "Access-Control-Allow-Methods": "GET,POST,OPTIONS",
    "Access-Control-Allow-Headers": "Content-Type"
  };
}
function json(body, status = 200) {
  return new Response(JSON.stringify(body), { status, headers: { ...cors(), "Content-Type": "application/json" } });
}
export {
  devices_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiZnVuY3Rpb25zL3V0aWxzL2RiLmpzIiwgImZ1bmN0aW9ucy9kZXZpY2VzLmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvLyBmdW5jdGlvbnMvdXRpbHMvZGIuanNcbmltcG9ydCBwZyBmcm9tICdwZyc7XG5jb25zdCB7IFBvb2wgfSA9IHBnO1xuXG5jb25zdCBjb25uZWN0aW9uU3RyaW5nID0gcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMIHx8IHByb2Nlc3MuZW52Lk5FT05fREFUQUJBU0VfVVJMO1xuaWYgKCFjb25uZWN0aW9uU3RyaW5nKSB7XG4gIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBEQVRBQkFTRV9VUkwgKE5lb24gUG9zdGdyZXMgY29ubmVjdGlvbiBzdHJpbmcpJyk7XG59XG5cbi8vIE5lb24gcmVxdWlyZXMgU1NMIGluIG1vc3QgY2FzZXNcbmNvbnN0IHBvb2wgPSBuZXcgUG9vbCh7XG4gIGNvbm5lY3Rpb25TdHJpbmcsXG4gIHNzbDogeyByZWplY3RVbmF1dGhvcml6ZWQ6IGZhbHNlIH1cbn0pO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcXVlcnkocSwgcGFyYW1zKSB7XG4gIGNvbnN0IGNsaWVudCA9IGF3YWl0IHBvb2wuY29ubmVjdCgpO1xuICB0cnkge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGNsaWVudC5xdWVyeShxLCBwYXJhbXMpO1xuICAgIHJldHVybiByZXM7XG4gIH0gZmluYWxseSB7XG4gICAgY2xpZW50LnJlbGVhc2UoKTtcbiAgfVxufVxuXG4vLyBFbnN1cmUgdGFibGVzIGV4aXN0IChydW4gYXQgY29sZCBzdGFydClcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBlbnN1cmVTY2hlbWEoKSB7XG4gIGF3YWl0IHF1ZXJ5KGBcbiAgICBDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyBkZXZpY2VzIChcbiAgICAgIGRldmljZV9pZCBURVhUIFBSSU1BUlkgS0VZLFxuICAgICAgbmFtZSBURVhULFxuICAgICAgY3JlYXRlZF9hdCBUSU1FU1RBTVBUWiBERUZBVUxUIE5PVygpXG4gICAgKTtcbiAgYCk7XG4gIGF3YWl0IHF1ZXJ5KGBcbiAgICBDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyByZWFkaW5ncyAoXG4gICAgICBpZCBCSUdTRVJJQUwgUFJJTUFSWSBLRVksXG4gICAgICBkZXZpY2VfaWQgVEVYVCBOT1QgTlVMTCBSRUZFUkVOQ0VTIGRldmljZXMoZGV2aWNlX2lkKSBPTiBERUxFVEUgQ0FTQ0FERSxcbiAgICAgIHRzIFRJTUVTVEFNUFRaIE5PVCBOVUxMLFxuICAgICAgdGVtcF9jIERPVUJMRSBQUkVDSVNJT04sXG4gICAgICBodW1pZGl0eSBET1VCTEUgUFJFQ0lTSU9OLFxuICAgICAgc291bmRfZGIgRE9VQkxFIFBSRUNJU0lPTixcbiAgICAgIHBheWxvYWRfanNvbiBKU09OQlxuICAgICk7XG4gIGApO1xufVxuIiwgIi8vIGZ1bmN0aW9ucy9kZXZpY2VzLmpzXG5pbXBvcnQgeyBxdWVyeSwgZW5zdXJlU2NoZW1hIH0gZnJvbSAnLi91dGlscy9kYi5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIChyZXEsIGNvbnRleHQpID0+IHtcbiAgaWYgKHJlcS5tZXRob2QgPT09ICdPUFRJT05TJykgcmV0dXJuIG5ldyBSZXNwb25zZShudWxsLCB7IGhlYWRlcnM6IGNvcnMoKSB9KTtcbiAgaWYgKHJlcS5tZXRob2QgIT09ICdHRVQnKSByZXR1cm4ganNvbih7IGVycm9yOiAnTWV0aG9kIG5vdCBhbGxvd2VkJyB9LCA0MDUpO1xuXG4gIHRyeSB7XG4gICAgYXdhaXQgZW5zdXJlU2NoZW1hKCk7XG4gICAgY29uc3QgeyByb3dzIH0gPSBhd2FpdCBxdWVyeShgU0VMRUNUIGRldmljZV9pZCwgQ09BTEVTQ0UobmFtZSwgZGV2aWNlX2lkKSBBUyBuYW1lIEZST00gZGV2aWNlcyBPUkRFUiBCWSBkZXZpY2VfaWRgKTtcbiAgICByZXR1cm4ganNvbih7IGRldmljZXM6IHJvd3MgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4ganNvbih7IGVycm9yOiBlLm1lc3NhZ2UgfSwgNTAwKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gY29ycygpIHtcbiAgcmV0dXJuIHtcbiAgICAnQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJzogcHJvY2Vzcy5lbnYuQ09SU19PUklHSU5TIHx8ICcqJyxcbiAgICAnQWNjZXNzLUNvbnRyb2wtQWxsb3ctTWV0aG9kcyc6ICdHRVQsUE9TVCxPUFRJT05TJyxcbiAgICAnQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVycyc6ICdDb250ZW50LVR5cGUnXG4gIH07XG59XG5mdW5jdGlvbiBqc29uKGJvZHksIHN0YXR1cz0yMDApIHtcbiAgcmV0dXJuIG5ldyBSZXNwb25zZShKU09OLnN0cmluZ2lmeShib2R5KSwgeyBzdGF0dXMsIGhlYWRlcnM6IHsgLi4uY29ycygpLCAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0gfSk7XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7O0FBQ0EsT0FBTyxRQUFRO0FBQ2YsSUFBTSxFQUFFLEtBQUssSUFBSTtBQUVqQixJQUFNLG1CQUFtQixRQUFRLElBQUksZ0JBQWdCLFFBQVEsSUFBSTtBQUNqRSxJQUFJLENBQUMsa0JBQWtCO0FBQ3JCLFFBQU0sSUFBSSxNQUFNLHdEQUF3RDtBQUMxRTtBQUdBLElBQU0sT0FBTyxJQUFJLEtBQUs7QUFBQSxFQUNwQjtBQUFBLEVBQ0EsS0FBSyxFQUFFLG9CQUFvQixNQUFNO0FBQ25DLENBQUM7QUFFRCxlQUFzQixNQUFNLEdBQUcsUUFBUTtBQUNyQyxRQUFNLFNBQVMsTUFBTSxLQUFLLFFBQVE7QUFDbEMsTUFBSTtBQUNGLFVBQU0sTUFBTSxNQUFNLE9BQU8sTUFBTSxHQUFHLE1BQU07QUFDeEMsV0FBTztBQUFBLEVBQ1QsVUFBRTtBQUNBLFdBQU8sUUFBUTtBQUFBLEVBQ2pCO0FBQ0Y7QUFHQSxlQUFzQixlQUFlO0FBQ25DLFFBQU0sTUFBTTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxHQU1YO0FBQ0QsUUFBTSxNQUFNO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsR0FVWDtBQUNIOzs7QUMxQ0EsSUFBTyxrQkFBUSxPQUFPLEtBQUssWUFBWTtBQUNyQyxNQUFJLElBQUksV0FBVztBQUFXLFdBQU8sSUFBSSxTQUFTLE1BQU0sRUFBRSxTQUFTLEtBQUssRUFBRSxDQUFDO0FBQzNFLE1BQUksSUFBSSxXQUFXO0FBQU8sV0FBTyxLQUFLLEVBQUUsT0FBTyxxQkFBcUIsR0FBRyxHQUFHO0FBRTFFLE1BQUk7QUFDRixVQUFNLGFBQWE7QUFDbkIsVUFBTSxFQUFFLEtBQUssSUFBSSxNQUFNLE1BQU0scUZBQXFGO0FBQ2xILFdBQU8sS0FBSyxFQUFFLFNBQVMsS0FBSyxDQUFDO0FBQUEsRUFDL0IsU0FBUyxHQUFHO0FBQ1YsV0FBTyxLQUFLLEVBQUUsT0FBTyxFQUFFLFFBQVEsR0FBRyxHQUFHO0FBQUEsRUFDdkM7QUFDRjtBQUVBLFNBQVMsT0FBTztBQUNkLFNBQU87QUFBQSxJQUNMLCtCQUErQixRQUFRLElBQUksZ0JBQWdCO0FBQUEsSUFDM0QsZ0NBQWdDO0FBQUEsSUFDaEMsZ0NBQWdDO0FBQUEsRUFDbEM7QUFDRjtBQUNBLFNBQVMsS0FBSyxNQUFNLFNBQU8sS0FBSztBQUM5QixTQUFPLElBQUksU0FBUyxLQUFLLFVBQVUsSUFBSSxHQUFHLEVBQUUsUUFBUSxTQUFTLEVBQUUsR0FBRyxLQUFLLEdBQUcsZ0JBQWdCLG1CQUFtQixFQUFFLENBQUM7QUFDbEg7IiwKICAibmFtZXMiOiBbXQp9Cg==
