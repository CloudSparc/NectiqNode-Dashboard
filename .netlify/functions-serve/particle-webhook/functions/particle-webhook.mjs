
import {createRequire as ___nfyCreateRequire} from "module";
import {fileURLToPath as ___nfyFileURLToPath} from "url";
import {dirname as ___nfyPathDirname} from "path";
let __filename=___nfyFileURLToPath(import.meta.url);
let __dirname=___nfyPathDirname(___nfyFileURLToPath(import.meta.url));
let require=___nfyCreateRequire(import.meta.url);


// functions/utils/db.js
import pg from "pg";
var { Pool } = pg;
var connectionString = process.env.DATABASE_URL || process.env.NEON_DATABASE_URL;
if (!connectionString) {
  throw new Error("Missing DATABASE_URL (Neon Postgres connection string)");
}
var pool = new Pool({
  connectionString,
  ssl: { rejectUnauthorized: false }
});
async function query(q, params) {
  const client = await pool.connect();
  try {
    const res = await client.query(q, params);
    return res;
  } finally {
    client.release();
  }
}
async function ensureSchema() {
  await query(`
    CREATE TABLE IF NOT EXISTS devices (
      device_id TEXT PRIMARY KEY,
      name TEXT,
      created_at TIMESTAMPTZ DEFAULT NOW()
    );
  `);
  await query(`
    CREATE TABLE IF NOT EXISTS readings (
      id BIGSERIAL PRIMARY KEY,
      device_id TEXT NOT NULL REFERENCES devices(device_id) ON DELETE CASCADE,
      ts TIMESTAMPTZ NOT NULL,
      temp_c DOUBLE PRECISION,
      humidity DOUBLE PRECISION,
      sound_db DOUBLE PRECISION,
      payload_json JSONB
    );
  `);
}

// functions/particle-webhook.js
var particle_webhook_default = async (req, context) => {
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: cors() });
  }
  if (req.method !== "POST") {
    return json({ error: "Method not allowed" }, 405);
  }
  const secret = req.headers.get("x-webhook-secret");
  if (!secret || secret !== (process.env.WEBHOOK_SECRET || "change-me")) {
    return json({ error: "unauthorized" }, 401);
  }
  let payload;
  try {
    payload = await req.json();
  } catch {
    return json({ error: "invalid json" }, 400);
  }
  const device_id = payload.device_id || payload.coreid || "unknown";
  const published_at = payload.published_at;
  const data = payload.data;
  let parsed = {};
  if (typeof data === "string") {
    try {
      parsed = JSON.parse(data);
    } catch {
      const parts = data.split(",").map((p) => p.trim());
      if (parts.length >= 3)
        parsed = { t: parseFloat(parts[0]), h: parseFloat(parts[1]), s: parseFloat(parts[2]) };
    }
  } else if (data && typeof data === "object") {
    parsed = data;
  }
  const t = coalesce(parsed.t, parsed.temp, parsed.temperature);
  const h = coalesce(parsed.h, parsed.hum, parsed.humidity);
  const s = coalesce(parsed.s, parsed.sound, parsed.sound_db);
  let ts;
  try {
    ts = published_at ? new Date(published_at).toISOString() : (/* @__PURE__ */ new Date()).toISOString();
  } catch {
    ts = (/* @__PURE__ */ new Date()).toISOString();
  }
  try {
    await ensureSchema();
    await query(`
      INSERT INTO devices (device_id, name)
      VALUES ($1, $1)
      ON CONFLICT (device_id) DO NOTHING
    `, [device_id]);
    await query(`
      INSERT INTO readings (device_id, ts, temp_c, humidity, sound_db, payload_json)
      VALUES ($1, $2, $3, $4, $5, $6::jsonb)
    `, [device_id, ts, t, h, s, JSON.stringify(payload)]);
  } catch (e) {
    return json({ error: "db error", details: e.message }, 500);
  }
  return json({ status: "ok" });
};
function coalesce(...vals) {
  for (const v of vals)
    if (v !== void 0 && v !== null)
      return v;
  return null;
}
function cors() {
  return {
    "Access-Control-Allow-Origin": process.env.CORS_ORIGINS || "*",
    "Access-Control-Allow-Methods": "GET,POST,OPTIONS",
    "Access-Control-Allow-Headers": "Content-Type, X-Webhook-Secret"
  };
}
function json(body, status = 200) {
  return new Response(JSON.stringify(body), { status, headers: { ...cors(), "Content-Type": "application/json" } });
}
export {
  particle_webhook_default as default
};
//# sourceMappingURL=data:application/json;base64,
